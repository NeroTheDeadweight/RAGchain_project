import telebot
from sqlalchemy import create_engine
from sqlalchemy.orm import Session
from models import Chat_History, create_tables
from chatGPT_For_tgbot import gpt
from telebot import types
from dotenv import load_dotenv
import os
from sqldb_int import get_chat_history, save_todb

create_tables()
def tgbot():
    load_dotenv()
    key = os.getenv('TELEBOT_KEY')
    bot = telebot.TeleBot(key)

    list_of_bot_commands = ('/start', '/history', '/help', '/chatgpt', '/photo')



    @bot.message_handler(commands=['start', 'help'])
    def help_list(message):
        bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:" + '\n' + "/start, /help, /chatgpt, /photo")
        bot.send_sticker(message.chat.id, "CAACAgIAAxkBAAEIqKxm7uBan7yMW1D3ap2pfG7BLvJroQAC1k0AApMnKEkhdxhnWZvD3zYE")

    @bot.message_handler(commands=['history'])
    def get_history_command(message):
        try:
            for p in get_chat_history():
                p = str(p)
                bot.send_message(message.chat.id, p)
        except:
            print("–ò—Å—Ç–æ—Ä–∏—è - —ç—Ç–æ –ª–æ–∂—å")

    @bot.message_handler(commands=['photo'])
    def get_photo(message):
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç', url='https://google.com'))
        markup.add(types.InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ', callback_data='delete'))
        markup.add(types.InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç', callback_data='edit'))
        bot.reply_to(message, '–ù–∞–π—Å —Ñ–æ—Ç–æ!', reply_markup=markup)

    @bot.message_handler(commands=['start'])
    def main(message):
        bot.send_message(message.chat.id, "–î–∞—Ä–æ–≤–∞, –±–∞–Ω–¥–∏—Ç. –≠—Ç–æ —á–∞—Ç-–±–æ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–æ–¥–µ–ª–∏ gpt 3.5üî•\n–ü—Ä–∏—Å—Ç—É–ø–∏–º!")

    @bot.message_handler(commands=['chatgpt'])
    def get_question(message):
        bot.send_message(message.chat.id, "–í–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏:")
        bot.register_next_step_handler(message, ai_message(message))

    def ai_message(message):
        answer = gpt(message.text)
        bot.send_message(message.chat.id, answer)
        save_todb(answer)

    @bot.message_handler()
    def writing_todb(message):
        if message.text not in list_of_bot_commands:
            save_todb(message.text)
        get_chat_history()

    bot.polling(none_stop=True)


if __name__ == '__main__':
    tgbot()
